using FluentValidation;
using FluentValidation.AspNetCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Security.Claims;
using System.Text;
using VulnerabilityTest.API.Hubs;
using VulnerabilityTest.API.Realtime;
using VulnerabilityTest.API.Services;
using VulnerabilityTest.Application.AutoMappings;
using VulnerabilityTest.Application.Services.Concretes;
using VulnerabilityTest.Application.Services.Interfaces;

using VulnerabilityTest.Application.Validators;
using VulnerabilityTest.Infrastructure.Data;

using VulnerabilityTest.Infrastructure.Repositories.Interfaces;
using VulnerabilityTest.Infrastructure.Repositories.Repos;


var builder = WebApplication.CreateBuilder(args);
builder.Configuration.AddJsonFile("/run/secrets/api_secret", optional: false, reloadOnChange: true);

// Add services to the container.


builder.Services.AddDbContext<AppDbContext>(opt =>
    opt.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

//Dependency Injection for Repositories
builder.Services.AddScoped<IUserRepository,UserRepository>();
builder.Services.AddScoped<IVulnerabilityScanRepository,VulnerabilityScanRepository>();
//Dependency Injection for Services
builder.Services.AddScoped<IUserService,UserService>();
builder.Services.AddScoped<IVulnerabilityScanService, VulnerabilityScanService>();
//Dependency Injection for AutoMapper
builder.Services.AddAutoMapper(typeof(MappingProfile).Assembly);
//Dependency Injection for Validator
builder.Services.AddValidatorsFromAssemblyContaining<UserRegisterDTOValidator>();
builder.Services.AddFluentValidationAutoValidation();
//Dependecy Injection for Token
builder.Services.AddScoped<ITokenService, TokenService>();
//Token Middleware
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        var key = Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]!);

        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],

            ValidateAudience = true,
            ValidAudience = builder.Configuration["Jwt:Audience"],

            ValidateLifetime = true,

            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),

            RoleClaimType = ClaimTypes.Role
        };
    });

// SignalR setup
builder.Services.AddSignalR();
// Dependency Injection for Scan Progress Service
builder.Services.AddScoped<IScanProgress, ScanProgressHubAdapter>();


builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Vulnerability API",
        Version = "v1"
    });

    // JWT token support
    var jwtSecurityScheme = new OpenApiSecurityScheme
    {
        Scheme = "bearer",
        BearerFormat = "JWT",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Description = "Enter token",

        Reference = new OpenApiReference
        {
            Id = JwtBearerDefaults.AuthenticationScheme,
            Type = ReferenceType.SecurityScheme
        }
    };

    c.AddSecurityDefinition(jwtSecurityScheme.Reference.Id, jwtSecurityScheme);

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        { jwtSecurityScheme, Array.Empty<string>() }
    });
});

// Configure CORS policy
builder.Services.AddCors(opt => opt
                        .AddPolicy("CorsPolicy", p => p
                        .WithOrigins("http://localhost:3000")
                        .AllowAnyHeader()
                        .AllowAnyMethod()
                        .AllowCredentials()));

builder.Services.AddSingleton<KafkaProducer>();

var app = builder.Build();

using (var scope = app.Services.CreateScope())
{
    try
    {
        var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        db.Database.Migrate();
    }
    catch (Exception ex)
    {
        app.Logger.LogError(ex, "DB migrate failed");
    }
}

// Apply CORS policy
app.UseCors("CorsPolicy");

// Configure SignalR 
app.MapHub<ScanHub>("/hubs/scanHub");

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
