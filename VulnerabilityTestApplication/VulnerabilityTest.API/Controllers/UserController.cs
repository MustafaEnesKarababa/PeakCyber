using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using VulnerabilityTest.Application.DTOs;
using VulnerabilityTest.Application.Services.Interfaces;
using VulnerabilityTest.Domain.Entities;

namespace VulnerabilityTest.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly ITokenService _tokenService;
        private readonly IMapper _mapper;

        public UserController(IUserService userService, ITokenService tokenService,IMapper mapper)
        {
            _userService = userService;
            _tokenService = tokenService;
            _mapper = mapper;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] UserRegisterDTO userRegisterDTO)
        {
            var isExist = await _userService.GetUserByEmailAsync(userRegisterDTO.Email);
            
            if(isExist != null)
            {
                return BadRequest("User already exists.");
            }

            var user = _mapper.Map<User>(userRegisterDTO);

            await _userService.CreateUserAsync(user);
            return Ok(new { message = "User registered successfully." });
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] UserLoginDTO userLoginDTO)
        {
            var existingUser = await _userService.GetUserByEmailAsync(userLoginDTO.Email);
            if (existingUser == null || existingUser.Password != userLoginDTO.Password)
            {
                return Unauthorized("Invalid email or password.");
            }

            var token = _tokenService.GenerateToken(existingUser);
            return Ok(new { token });
        }

        [Authorize]
        [HttpGet("profile")]
        public async Task<IActionResult> GetProfile()
        {
            var claim = User.Claims.FirstOrDefault(x => 
                                        x.Type == ClaimTypes.NameIdentifier || 
                                        x.Type == JwtRegisteredClaimNames.Sub);
            if (claim == null)
            {
                return Unauthorized("User not authenticated.");
            }
            
            var user = await _userService.GetUserByIdAsync(int.Parse(claim.Value));
            if(user == null)
            {
                return NotFound("User not found.");
            }

            var userProfileDTO = _mapper.Map<UserProfileDTO>(user);

            return Ok(userProfileDTO);

        }




    }
}
