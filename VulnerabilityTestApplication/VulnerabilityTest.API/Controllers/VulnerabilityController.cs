using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using VulnerabilityTest.API.Services;
using VulnerabilityTest.Application.DTOs;
using VulnerabilityTest.Application.Services.Interfaces;

namespace VulnerabilityTest.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private readonly IVulnerabilityScanService _vulnerabilityScanService;
        private readonly KafkaProducer _kafkaProducer;
        private readonly IServiceScopeFactory _scopeFactory;

        public VulnerabilityController(IVulnerabilityScanService vulnerabilityScanService, KafkaProducer kafkaProducer, IServiceScopeFactory scopeFactory)
        {
            _vulnerabilityScanService = vulnerabilityScanService;
            _kafkaProducer = kafkaProducer;
            _scopeFactory = scopeFactory;
        }

        [Authorize]
        [HttpPost("start-scan")]
        public async Task<IActionResult> StartScan([FromBody] StartScanRequestDTO startScanRequestDTO)
        {
            var claim = User.Claims.FirstOrDefault(c =>
                                c.Type == ClaimTypes.NameIdentifier ||
                                c.Type == JwtRegisteredClaimNames.Sub);
            if (claim == null || !int.TryParse(claim.Value, out var userId))
            {
                return Unauthorized();
            }

            var runId = startScanRequestDTO.OperationId != Guid.Empty ? startScanRequestDTO.OperationId : Guid.NewGuid();

            var userEmail = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value ?? "email";

            await _kafkaProducer.SendStartedAsync(runId.ToString(), userId, userEmail, startScanRequestDTO.TargetUrl, HttpContext.RequestAborted);

            _ = RunScanInBackground(runId, userId, userEmail, startScanRequestDTO);

            //var scanId = await _vulnerabilityScanService.StartScanAsync(userId, startScanRequestDTO, runId);
            //return Ok(new { RunId = runId, ScanId = scanId });

            return Ok(new { RunId = runId });
        }

        private Task RunScanInBackground(Guid runId, int userId, string userEmail, StartScanRequestDTO dto)
        {
            return Task.Run(async () =>
            {
                try
                {
                    using var scope = _scopeFactory.CreateScope(); 
                    var scanSvc = scope.ServiceProvider.GetRequiredService<IVulnerabilityScanService>();

               
                    var scanId = await scanSvc.StartScanAsync(userId, dto, runId);

                    await _kafkaProducer.SendCompletedAsync(runId.ToString(), userId, userEmail, dto.TargetUrl, scanId);
                }
                catch (Exception ex)
                {
                    //ileride failed eventi yaparsan 
                }
            });
        }

        [Authorize]
        [HttpGet("get-scan/{id}")]
        public async Task<IActionResult> GetScan(int id)
        {
            var claim = User.Claims.FirstOrDefault(c =>
                                    c.Type == ClaimTypes.NameIdentifier ||
                                    c.Type == JwtRegisteredClaimNames.Sub);

            var userRole = User.Claims.FirstOrDefault(c =>
                                    c.Type == ClaimTypes.Role)?.Value;



            if (claim == null || !int.TryParse(claim.Value, out var userId))
            {
                return Unauthorized("Unauthorized");
            }

            var scan = await _vulnerabilityScanService.GetScanByIdAsync(id);

            if (userRole != "Admin")
            {
                if (scan == null || scan.UserId != userId)
                {
                    return NotFound("Scan not found or does not belong to the user.");
                }
            }
            else
            {
                if (scan == null)
                {
                    return NotFound("Scan not found");
                }
            }

            return Ok(scan);

        }

        [Authorize]
        [HttpGet("get-scans")]
        public async Task<IActionResult> GetScans()
        {
            var claim = User.Claims.FirstOrDefault(c =>
                                    c.Type == ClaimTypes.NameIdentifier ||
                                    c.Type == JwtRegisteredClaimNames.Sub);

            if (claim == null || !int.TryParse(claim.Value, out var userId))
            {
                return Unauthorized("Unauthorized");
            }

            var scans = await _vulnerabilityScanService.GetScansByUserIdAsync(userId);
            return Ok(scans);
        }





    }
}
