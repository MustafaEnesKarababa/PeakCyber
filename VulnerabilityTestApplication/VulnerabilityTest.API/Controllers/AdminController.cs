using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using VulnerabilityTest.Application.DTOs;
using VulnerabilityTest.Application.Services.Interfaces;

namespace VulnerabilityTest.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin")]
    public class AdminController : ControllerBase
    {
        private readonly IVulnerabilityScanService _vulnerabilityScanService;
        private readonly IUserService _userService;
        private readonly IMapper _mapper;

        public AdminController(IVulnerabilityScanService vulnerabilityScanService, IMapper mapper, IUserService userService)
        {
            _vulnerabilityScanService = vulnerabilityScanService;
            _userService = userService;
            _mapper = mapper;
        }

        [HttpGet("get-all-scans")]
        public async Task<IActionResult> GetAllScans()
        {
            var scans = await _vulnerabilityScanService.GetAllScansAsync();
            if (scans == null || !scans.Any())
            {
                return NotFound("No scans found.");
            }


            var withoutResults = _mapper.Map<List<ScansAndUsersListDTO>>(scans);

            return Ok(withoutResults);
        }

        [HttpGet("get-users")]
        public async Task<IActionResult> GetUsers()
        {
            var users = await _userService.GetAllUsersAsync();
            if (users == null || !users.Any())
            {
                return NotFound("No users found.");
            }
            var userList = _mapper.Map<List<UserListDTO>>(users);
            return Ok(userList);
        }

        [HttpGet("get-user/{userId}")]
        public async Task<IActionResult> GetUser(int userId)
        {
            var user = await _userService.GetUserByIdAsync(userId);
            if (user == null)
            {
                return NotFound("User not found.");
            }

            var userProfile = _mapper.Map<UserProfileDTO>(user);
            return Ok(userProfile);
        }

        [HttpPut("update-user")]
        public async Task<IActionResult> UpdateUser([FromBody] UserUpdateDTO userUpdateDTO)
        {
           var user = await _userService.GetUserByIdAsync(userUpdateDTO.Id);
            if (user == null)
            {
                return NotFound("User not found.");
            }

            if(!string.IsNullOrWhiteSpace(userUpdateDTO.UserName))
                user.Username = userUpdateDTO.UserName;
            if (!string.IsNullOrWhiteSpace(userUpdateDTO.Email))
                user.Email = userUpdateDTO.Email;
            if (!string.IsNullOrWhiteSpace(userUpdateDTO.Password))
                user.Password = userUpdateDTO.Password;
            if (!string.IsNullOrWhiteSpace(userUpdateDTO.Role))
                user.Role = userUpdateDTO.Role;

            await _userService.UpdateUserAsync(user);

            return Ok(new { message = "User updated successfully." });
        }

        [HttpDelete("delete-user/{userId}")]
        public async Task<IActionResult> DeleteUser(int userId)
        {
            var user = await _userService.GetUserByIdAsync(userId);
            if (user == null)
            {
                return NotFound("User not found.");
            }

            await _userService.DeleteUserAsync(userId);
            return Ok(new { message = "User deleted successfully." });
        }

    }
}

