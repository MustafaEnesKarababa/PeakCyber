using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace VulnerabilityTest.Notifier.Email;

public sealed class EmailJsSender
{
    private static readonly HttpClient _http = new HttpClient();
    private readonly string _endpoint;
    private readonly string _serviceId;
    private readonly string _templateId;
    private readonly string? _publicKey;  
    private readonly string? _privateKey;  
    private readonly string? _fromName;

    public EmailJsSender(IConfiguration cfg)
    {
        _endpoint = cfg["EmailJs:Endpoint"] ?? "https://api.emailjs.com/api/v1.0/email/send";
        _serviceId = cfg["EmailJs:ServiceId"] ?? throw new InvalidOperationException("EmailJs:ServiceId missing");
        _templateId = cfg["EmailJs:TemplateId"] ?? throw new InvalidOperationException("EmailJs:TemplateId missing");
        _publicKey = cfg["EmailJs:PublicKey"];
        _privateKey = cfg["EmailJs:PrivateKey"]; 
        _fromName = cfg["EmailJs:FromName"];
    }


    public async Task SendCompletedAsync(string toEmail, string operationId, int scanId, string targetUrl, CancellationToken ct = default)
    {
        var templateParams = new
        {
            to_email = toEmail,
            operation_id = operationId,
            scan_id = scanId,
            target_url = targetUrl,
            time_utc = DateTimeOffset.UtcNow.ToString("yyyy-MM-dd HH:mm:ss 'UTC'"),
            from_name = _fromName
        };

        if (string.IsNullOrWhiteSpace(_publicKey))
            throw new InvalidOperationException("EmailJS PublicKey (user_id) is missing.");

        var body = new Dictionary<string, object?>
        {
            ["service_id"] = _serviceId,
            ["template_id"] = _templateId,
            ["user_id"] = _publicKey,          
            ["template_params"] = templateParams
        };

        if (!string.IsNullOrWhiteSpace(_privateKey))
            body["accessToken"] = _privateKey;        

        using var req = new HttpRequestMessage(HttpMethod.Post, _endpoint);
        req.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
        var json = System.Text.Json.JsonSerializer.Serialize(body);
        req.Content = new StringContent(json, Encoding.UTF8, "application/json");

        using var resp = await _http.SendAsync(req, ct);
        var respText = await resp.Content.ReadAsStringAsync(ct);

        if (!resp.IsSuccessStatusCode)
        {
            throw new InvalidOperationException($"EmailJS send failed. Status: {resp.StatusCode}");
        }


    }

}

