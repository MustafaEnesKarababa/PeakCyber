using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityTest.Domain.Entities;
using VulnerabilityTest.Infrastructure.Data;
using VulnerabilityTest.Infrastructure.Repositories.Interfaces;

namespace VulnerabilityTest.Infrastructure.Repositories.Repos
{
    public class UserRepository : IUserRepository
    {
        private readonly AppDbContext _context;
        public UserRepository(AppDbContext context)
        {
            _context = context;
        }

        // Save edip etmediğiyle ilgili kontrol yapabilirsin sonra
        public async Task AddUserAsync(User user)
        {
            _context.Users.Add(user);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteUserAsync(int id)
        {
            var user = _context.Users.Find(id);
            if (user != null)
            {
                _context.Users.Remove(user);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<List<User>> GetAllUsersAsync()
        {
            var users = _context.Users
                                .Include( x => x.VulnerabilityScans)
                                .ToListAsync();
            return await users;
        }

        public async Task<User> GetUserByIdAsync(int id)
        {
            var user = _context.Users
                                .Include(x => x.VulnerabilityScans)
                                .FirstOrDefaultAsync(x => x.Id == id);
            return await user;
        }

        public async Task<User> GetUserByEmailAsync(string email)
        {
            var user = await _context.Users
                                .FirstOrDefaultAsync(x => x.Email == email);
            return user;
        }

        public async Task UpdateUserAsync(User user)
        {
            _context.Users.Update(user);
            await _context.SaveChangesAsync();
        }
    }
}
