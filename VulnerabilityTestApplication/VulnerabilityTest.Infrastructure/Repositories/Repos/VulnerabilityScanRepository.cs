using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityTest.Domain.Entities;
using VulnerabilityTest.Infrastructure.Data;
using VulnerabilityTest.Infrastructure.Repositories.Interfaces;

namespace VulnerabilityTest.Infrastructure.Repositories.Repos
{
    public class VulnerabilityScanRepository : IVulnerabilityScanRepository
    {
        private readonly AppDbContext _context;
        public VulnerabilityScanRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task AddAsync(VulnerabilityScan scan)
        {
            _context.VulnerabilityScans.Add(scan);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var scan = await _context.VulnerabilityScans.FindAsync(id);
            if (scan != null)
            {
                _context.VulnerabilityScans.Remove(scan);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<VulnerabilityScan> GetByIdAsync(int id)
        {
            var scan = await _context.VulnerabilityScans.FirstOrDefaultAsync(x => x.Id == id);
            return scan;
        }

        public Task<List<VulnerabilityScan>> GetByUserIdAsync(int userId)
        {
            var scans = _context.VulnerabilityScans
                                .Where(x => x.UserId == userId)
                                .ToListAsync();

            return scans;
        }

        public async Task<List<VulnerabilityScan>> GetAllAsync()
        {
            return await _context.VulnerabilityScans
                    .Include(x => x.User)
                    .OrderByDescending(x => x.ScanDate)
                    .ToListAsync();

        }
    }
}
