using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityTest.Application.DTOs;

namespace VulnerabilityTest.Application.Validators
{
    public class UserUpdateDTOValidator : AbstractValidator<UserUpdateDTO>
    {
        public UserUpdateDTOValidator()
        {
            RuleFor(x => x.Id)
                .GreaterThan(0);

            When(x => x.UserName != null, () => 
            {
                RuleFor(x => x.UserName)
                    .NotEmpty()
                    .WithMessage("Username cannot be empty.")
                    .MinimumLength(3)
                    .WithMessage("Username must be at least 3 characters long.")
                    .MaximumLength(40)
                    .WithMessage("Username cannot exceed 40 characters.");
            });

            When(x => x.Email != null, () =>
            { 
                RuleFor(x => x.Email)
                    .EmailAddress()
                    .WithMessage("Invalid email format.");
            });

            When(x => x.Password != null, () =>
            {
                RuleFor(x => x.Password)
                    .MinimumLength(4)
                    .WithMessage("Password must be at least 4 characters long.");
            });

            When(x => x.Role != null, () =>
            {
                RuleFor(x => x.Role)
                    .Must(role => role == "Admin" || role == "Developer")
                    .WithMessage("Role must be either 'Admin' or 'Developer'");
            });
        }
    }
}
