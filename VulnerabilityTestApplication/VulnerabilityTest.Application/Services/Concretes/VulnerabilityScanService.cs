using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityTest.Application.DTOs;
using VulnerabilityTest.Application.Services.Interfaces;

using VulnerabilityTest.Domain.Entities;
using VulnerabilityTest.Infrastructure.Data;
using VulnerabilityTest.Infrastructure.Repositories.Interfaces;

namespace VulnerabilityTest.Application.Services.Concretes
{
    public class VulnerabilityScanService : IVulnerabilityScanService
    {
        private readonly IVulnerabilityScanRepository _vulnerabilityScanRepository;

        private readonly IScanProgress _scanProgress;

        public VulnerabilityScanService(IVulnerabilityScanRepository vulnerabilityScanRepository, IScanProgress scanProgress)
        {
            _vulnerabilityScanRepository = vulnerabilityScanRepository;
            _scanProgress = scanProgress;
        }

        public Task<VulnerabilityScan> GetScanByIdAsync(int scanId)
        {
            return _vulnerabilityScanRepository.GetByIdAsync(scanId);
        }

        public Task<List<VulnerabilityScan>> GetScansByUserIdAsync(int userId)
        {
            return _vulnerabilityScanRepository.GetByUserIdAsync(userId);
        }

        public Task CreateScanAsync(VulnerabilityScan scan)
        {
            return _vulnerabilityScanRepository.AddAsync(scan);
        }

        public Task DeleteScanAsync(int scanId)
        {
            return _vulnerabilityScanRepository.DeleteAsync(scanId);
        }

        public async Task<List<VulnerabilityScan>> GetAllScansAsync()
        {
            return await _vulnerabilityScanRepository.GetAllAsync();
        }

        public async Task<int> StartScanAsync(int userId, StartScanRequestDTO startScanRequestDTO, Guid runId)
        {
            var folderName = Guid.NewGuid().ToString("N");
            var tempPath = Path.Combine(Path.GetTempPath(), "TempScans", folderName);

            await _scanProgress.StageAsync(runId, "01_Preparing", "Preparing downloading..");
            await _scanProgress.StageAsync(runId, "02_CreateTemp", "Creating temporary folder..");

            Directory.CreateDirectory(tempPath);
            await _scanProgress.StageAsync(runId, "03_TempReady", "Temp folder ready..");

            try
            {

                await _scanProgress.StageAsync(runId, "04_GitClone", "Cloning repository..");

                using (var gitProcess = new Process())
                {
                    gitProcess.StartInfo = new ProcessStartInfo
                    {
                        FileName = "git",
                        Arguments = $"clone --depth 1 --single-branch {startScanRequestDTO.TargetUrl} .",
                        WorkingDirectory = tempPath,
                        UseShellExecute = false,
                        CreateNoWindow = true,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true
                    };

                    gitProcess.StartInfo.Environment["GIT_TERMINAL_PROMPT"] = "0";
                    gitProcess.StartInfo.Environment["GIT_LFS_SKIP_SMUDGE"] = "1";

                    gitProcess.Start();
                    var gitOut = await gitProcess.StandardOutput.ReadToEndAsync();
                    var gitErr = await gitProcess.StandardError.ReadToEndAsync();
                    await gitProcess.WaitForExitAsync();

                    if (gitProcess.ExitCode != 0)
                        throw new InvalidOperationException($"git clone failed (exit {gitProcess.ExitCode}): {gitErr}");
                }

                await _scanProgress.StageAsync(runId, "05_CloneDone", "Project cloned..");

                await _scanProgress.StageAsync(runId, "06_Semgrep", "Running semgrep scan..");

                string semgrepOutput;
                using (var semgrepProcess = new Process())
                {
                    semgrepProcess.StartInfo = new ProcessStartInfo
                    {
                        //FileName = "semgrep",
                        //Arguments = "--config auto . --json ",
                        FileName = "semgrep",
                        Arguments = $"--config auto . --json",
                        WorkingDirectory = tempPath,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    };

                    semgrepProcess.Start();
                    var stdOut = await semgrepProcess.StandardOutput.ReadToEndAsync();
                    var stdErr = await semgrepProcess.StandardError.ReadToEndAsync();
                    await semgrepProcess.WaitForExitAsync();

                    if (semgrepProcess.ExitCode != 0)
                        throw new InvalidOperationException($"semgrep failed (exit {semgrepProcess.ExitCode}): {stdErr}");

                    semgrepOutput = stdOut;
                }

                await _scanProgress.StageAsync(runId, "07_SemgrepDone", "Semgrep scan completed..");
                await _scanProgress.StageAsync(runId, "08_Save", "Saving scan results..");

                var scan = new VulnerabilityScan
                {
                    TargetUrl = startScanRequestDTO.TargetUrl,
                    Scanresult = semgrepOutput,
                    UserId = userId,
                    ScanDate = DateTime.UtcNow
                };

                await _vulnerabilityScanRepository.AddAsync(scan);
                

                await _scanProgress.CompletedAsync(runId, scan.Id, "Scan completed successfully.");
                return scan.Id;
            }
            catch (Exception ex)
            {
                await _scanProgress.FailedAsync(runId, $"Scan Failed : {ex.Message}");
                throw;
            }
            finally
            {
                try 
                {
                    DeleteTempFolder(tempPath);
                } 
                catch 
                {

                }
            }
        }





        //public async Task<int> StartScanAsync(int userId, StartScanRequestDTO startScanRequestDTO)
        //{

        //    var folderName = Guid.NewGuid().ToString();
        //    var tempPath = Path.Combine(Directory.GetCurrentDirectory(), "TempScans", folderName);



        //    Directory.CreateDirectory(tempPath);

        //    // tempfolder ayrı scan işlemi ayrı metotlara çıkabilir frontend tarafında indirildiğini gösterebilirsin?
        //    var gitClone = new ProcessStartInfo
        //    {
        //        FileName = "git",
        //        Arguments = $"clone {startScanRequestDTO.TargetUrl} .",
        //        WorkingDirectory = tempPath,
        //        RedirectStandardOutput = true,
        //        RedirectStandardError = true,
        //        UseShellExecute = false,
        //        CreateNoWindow = true

        //    };

        //    using (var gitProcess = Process.Start(gitClone))
        //    {
        //        await gitProcess.WaitForExitAsync();
        //    }


        //    var sempgrepInfo = new ProcessStartInfo
        //    {
        //        FileName = "semgrep",
        //        Arguments = "--config auto . --json",
        //        WorkingDirectory = tempPath,
        //        RedirectStandardOutput = true,
        //        RedirectStandardError = true,
        //        UseShellExecute = false,
        //        CreateNoWindow = true
        //    };

        //    string output;

        //    using (var semgrep = Process.Start(sempgrepInfo))
        //    {
        //        output = await semgrep.StandardOutput.ReadToEndAsync();
        //        await semgrep.WaitForExitAsync();
        //    }


        //    //testten sonra automapper a ekle
        //    var scan = new VulnerabilityScan
        //    {
        //        TargetUrl = startScanRequestDTO.TargetUrl,
        //        Scanresult = output,
        //        UserId = userId,
        //        ScanDate = DateTime.UtcNow
        //    };

        //    await _vulnerabilityScanRepository.AddAsync(scan);


        //    DeleteTempFolder(tempPath);



        //    return scan.Id;

        //}

        private void DeleteTempFolder(string path)
        {
            if (!Directory.Exists(path))
                return;

            foreach (var f in Directory.EnumerateFiles(path, "*", SearchOption.AllDirectories))
            {
                try { File.SetAttributes(f, FileAttributes.Normal); } catch { }
            }
            foreach (var d in Directory.EnumerateDirectories(path, "*", SearchOption.AllDirectories))
            {
                try { File.SetAttributes(d, FileAttributes.Normal); } catch { }
            }

            for (int i = 0; i < 5; i++)
            {
                try
                {
                    Directory.Delete(path, true);
                    return;
                }
                catch (IOException)
                {
                    Thread.Sleep(200);
                }
                catch (UnauthorizedAccessException)
                {
                    Thread.Sleep(200);
                }
            }


        }

    }
}
