"use client";

import { useEffect, useState } from "react";
import { getUsers, updateUser, deleteUser } from "@/api/admin";

export default function ManageUsersPage() {
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);
  const [confirmDeleteId, setConfirmDeleteId] = useState<number | null>(null);

  const [editId, setEditId] = useState<number | null>(null);
  const [form, setForm] = useState({
    userName: "",
    email: "",
    role: "",
    password: "",
  });
  const [saving, setSaving] = useState(false);
  const [deletingId, setDeletingId] = useState<number | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const list = await getUsers();
        setUsers(Array.isArray(list) ? list : []);
      } catch (e: any) {
        setErr(e.message || "Failed to load users");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const startEdit = (u: any) => {
    const id = Number(u.id ?? u.Id);
    setEditId(id);
    setForm({
      userName: u.userName,
      email: u.email,
      role: u.role,
      password: "",
    });
    setErr(null);
  };

  const cancelEdit = () => {
    setEditId(null);
    setForm({ userName: "", email: "", role: "", password: "" });
    setConfirmDeleteId(null);
  };

  const saveEdit = async () => {
    if (editId == null) return;

    setSaving(true);
    setErr(null);

    try {
      const payload: any = { id: editId };
      if (form.userName.trim()) payload.userName = form.userName.trim();
      if (form.email.trim()) payload.email = form.email.trim();
      if (form.role.trim()) payload.role = form.role.trim();
      if (form.password.trim()) payload.password = form.password.trim();

      await updateUser(payload);

      setUsers((prev) =>
        prev.map((u) => {
          const id = Number(u.id ?? u.Id);
          if (id !== editId) return u;

          return {
            ...u,
            ...(payload.userName ? { userName: payload.userName } : {}),
            ...(payload.email ? { email: payload.email } : {}),
            ...(payload.role ? { role: payload.role } : {}),
            ...(payload.password ? { password: payload.password } : {}),
          };
        })
      );

      cancelEdit();
    } catch (e: any) {
      setErr(e.message || "Failed to update user");
    } finally {
      setSaving(false);
    }
  };

  const removeUser = async (u: any) => {
    const id = Number(u.id ?? u.Id);
    
    if (confirmDeleteId !== id) 
    {
      setConfirmDeleteId(id)
      return;
    }

    setDeletingId(id);
    setErr(null);

    try {
      await deleteUser(id);
      setUsers((prev) => prev.filter((x) => Number(x.id ?? x.Id) !== id));

      if (editId === id) 
        cancelEdit();

    } catch (e: any) {
      setErr(e.message || "Failed to delete user");
    } finally {
      setDeletingId(null);
      setConfirmDeleteId(null);
    }
  }

  if (loading) {
    return (
      <main className="min-h-screen grid place-items-center p-6">Loading…</main>
    );
  }

  return (
    <main className="p-6 min-w-0">
      <h1 className="text-2xl font-semibold mb-4">Manage Users</h1>
      {err && <p className="text-red-600 mb-3">{err}</p>}

      {users.length === 0 ? (
        <p className="opacity-80">No users found.</p>
      ) : (
        <div className="space-y-3">
          {users.map((u) => {
            const id = Number(u.id ?? u.Id);
            const userName = u.userName;
            const email = u.email;
            const role = u.role;

            const createdText = new Date(u.createdAt).toLocaleString();

            const isEditing = editId === id;

            return (
              <div key={id} className="border rounded p-3 max-w-full">
                <div className="flex items-start justify-between gap-4 text-sm">
                  <div className="min-w-0">
                    <div>
                      <span className="opacity-70">ID:</span>{" "}
                      <span className="font-mono">{id}</span>
                    </div>
                    <div>
                      <span className="opacity-70">Username:</span>{" "}
                      <span className="font-mono break-all [overflow-wrap:anywhere]">
                        {userName}
                      </span>
                    </div>
                    <div>
                      <span className="opacity-70">Email:</span>{" "}
                      <span className="break-all [overflow-wrap:anywhere]">
                        {email}
                      </span>
                    </div>
                    <div>
                      <span className="opacity-70">Role:</span>{" "}
                      <span className="font-mono">{role}</span>
                    </div>
                    <div>
                      <span className="opacity-70">Created:</span>{" "}
                      <span className="font-mono">{createdText}</span>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <button
                      className="inline-flex items-center justify-center h-8 px-3 text-sm rounded border whitespace-nowrap shrink-0"
                      onClick={() => (isEditing ? cancelEdit() : startEdit(u))}
                      disabled={deletingId === id}
                    >
                      {isEditing ? "Cancel" : "Edit"}
                    </button>
                    <button
                      className="inline-flex items-center justify-center h-8 px-3 text-sm rounded border whitespace-nowrap shrink-0"
                      onClick={() => removeUser(u)}
                      disabled={deletingId === id}
                    >
                      {deletingId === id ? "Deleting…" : confirmDeleteId === id ? "Sure?" : "Delete"}
                    </button>
                  </div>
                </div>

                {isEditing && (
                  <div className="mt-3 border-t pt-3">
                    <div className="grid gap-2 sm:grid-cols-2">
                      <label className="text-sm">
                        <div className="opacity-70 mb-1">Username</div>
                        <input
                          className="w-full border rounded p-2"
                          value={form.userName}
                          onChange={(e) =>
                            setForm((f) => ({ ...f, userName: e.target.value }))
                          }
                        />
                      </label>

                      <label className="text-sm">
                        <div className="opacity-70 mb-1">Email</div>
                        <input
                          className="w-full border rounded p-2"
                          type="email"
                          value={form.email}
                          onChange={(e) =>
                            setForm((f) => ({ ...f, email: e.target.value }))
                          }
                        />
                      </label>

                      <label className="text-sm">
                        <div className="opacity-70 mb-1">
                          Password (optional)
                        </div>
                        <input
                          className="w-full border rounded p-2"
                          type="password"
                          value={form.password}
                          onChange={(e) =>
                            setForm((f) => ({ ...f, password: e.target.value }))
                          }
                        />
                      </label>

                      <label className="text-sm">
                        <div className="opacity-70 mb-1">Role</div>
                        <select
                          className="w-full border rounded p-2"
                          value={form.role}
                          onChange={(e) =>
                            setForm((f) => ({ ...f, role: e.target.value }))
                          }
                        >
                          <option className="text-black" value="Developer">
                            Developer
                          </option>
                          <option className="text-black" value="Admin">
                            Admin
                          </option>
                        </select>
                      </label>
                    </div>

                    <div className="mt-3 flex gap-2">
                      <button
                        className="inline-flex items-center justify-center h-8 px-3 text-sm rounded border whitespace-nowrap"
                        onClick={saveEdit}
                        disabled={saving}
                      >
                        {saving ? "Saving…" : "Save"}
                      </button>
                      <button
                        className="inline-flex items-center justify-center h-8 px-3 text-sm rounded border whitespace-nowrap"
                        onClick={cancelEdit}
                        disabled={saving}
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      )}
    </main>
  );
}
