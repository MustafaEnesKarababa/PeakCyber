"use client";

import { useEffect, useState } from "react";
import { getScans } from "@/api/scans";

export default function ScanHistoryPage() {
  const [scans, setScans] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedScanId, setSelectedScanId] = useState<number | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const list = await getScans();
        setScans(Array.isArray(list) ? list : []);
      } catch (e: any) {
        setError(e.message || "Failed to load scans");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  if (loading) {
    return (
      <main className="min-h-screen grid place-items-center p-6">
        <p>Loading...</p>
      </main>
    );
  }

  return (
    <main className="p-6 min-w-0">
      <h1 className="text-2xl font-semibold mb-4">Scan History</h1>

      {error && <p className="text-red-600 mb-3">{error}</p>}

      {scans.length === 0 ? (
        <p className="opacity-80">No scans found</p>
      ) : (
        <div className="space-y-3">
          {scans.map((scan) => {
            return (
              <div key={scan.id} className="border rounded p-3 max-w-full">
                <div className="flex item-start justify-between gap-4">
                  <div className="text-sm min-w-0">
                    <div>
                      <span className="opacity-70">Scan ID :</span>
                      <span className="font-font-mono">{scan.id}</span>
                    </div>
                    <div>
                      <span className="opacity-70">Target URL :</span>
                      <span className="break-all [overflow-wrap:anywhere]">
                        {scan.targetUrl}
                      </span>
                    </div>
                    <div>
                      <span className="opacity-70">Scan Date :</span>
                      <span className="font-font-mono">
                        {new Date(scan.scanDate).toLocaleString()}
                      </span>
                    </div>
                  </div>

                  <button
                    className="border rounded px-3 py-1 text-sm shrink-0"
                    onClick={() =>
                      setSelectedScanId(selectedScanId ? null : Number(scan.id))
                    }
                    disabled={!scan.scanresult}
                  >
                    {selectedScanId === scan.id ? "Hide Result" : "Show Result"}
                  </button>
                </div>

                {selectedScanId === scan.id && scan.scanresult && (
                  <div className="mt-3">
                    <div className="font-medium mb-1">Scan Result:</div>
                    <pre
                      className="
                        text-xs  text-gray-100 rounded p-3
                        whitespace-pre-wrap break-words [overflow-wrap:anywhere]
                        max-w-full max-h-96 overflow-auto"
                    >
                      {JSON.stringify(JSON.parse(scan.scanresult ?? scan.scanresult), null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      )}
    </main>
  );
}
