"use client"

import { useEffect, useRef, useState } from "react"
import { startScan, getScan } from "@/api/scans"
import { ensureHubStarted, getScanHubConnection } from "@/realtime/scanHub"

type StageEvent = { runId: string; step: string; message: string; at: string }
type CompletedEvent = { runId: string; scanId?: number | null; message?: string | null; at: string }
type FailedEvent = { runId: string; error: string; at: string }



export default function StartScanPage() {
  const [targetUrl, setTargetUrl] = useState("");
  const [loading, setLoading] = useState(false);

  const [error, setError] = useState<string | null>(null);
  const [runId, setRunId] = useState<string | null>(null);

  const [scanId, setScanId] = useState<number | null>(null);
  const [scanResult, setScanResult] = useState<any | null>(null);

  const [stages, setStages] = useState<StageEvent[]>([]);
  const [status, setStatus] = useState<"idle" | "running" | "completed" | "failed">("idle");

  const currentRunIdRef = useRef<string | null>(null);
  const fallbackTimerRef = useRef<any>(null);


  useEffect(() => {
    ensureHubStarted().catch((e) => console.warn("Hub start error:", e));
  }, []);


  useEffect(() => {
    const conn = getScanHubConnection();

    const onStage = (evt: StageEvent) => {
      if (evt.runId !== currentRunIdRef.current) return;

      // setStages([evt])
      setStages((prev) => [...prev, evt]);
      setStatus("running");
    };

    const onCompleted = async (evt: CompletedEvent) => {
      if (evt.runId !== currentRunIdRef.current) 
        return;

      clearTimeout(fallbackTimerRef.current);
      setStatus("completed");
      setLoading(false);

      const sid = evt.scanId ?? scanId;
      if (sid && !scanResult) {
        setScanId(sid);
        try {
          const data = await getScan(sid);
          setScanResult(data);
        } catch (e: any) {
          setError(e?.message || "Failed to load scan result");
        }
      }
    };

    const onFailed = (evt: FailedEvent) => {
      if (evt.runId !== currentRunIdRef.current) return;

      clearTimeout(fallbackTimerRef.current);
      setStatus("failed");
      setError(evt.error || "Scan failed");
      setLoading(false);
    };

    conn.on("Stage", onStage);
    conn.on("Completed", onCompleted);
    conn.on("Failed", onFailed);

    conn.onreconnected(async () => {
      if (currentRunIdRef.current) {
        try {
          await conn.invoke("JoinGroup", currentRunIdRef.current);
        } catch {}
      }
    });

    return () => {
      conn.off("Stage", onStage);
      conn.off("Completed", onCompleted);
      conn.off("Failed", onFailed);
    };
  }, [scanId, scanResult]);

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setScanResult(null);
    setScanId(null);
    setStages([]);
    setStatus("idle");
    setRunId(null);
    currentRunIdRef.current = null;
    clearTimeout(fallbackTimerRef.current);

    const url = targetUrl.trim();
    if (!url) {
      setError("Please enter a target URL");
      return;
    }

    setLoading(true);
    try {

      const clientRunId =
        (globalThis.crypto?.randomUUID?.() ?? `${Date.now()}-${Math.random()}`).toString()

      setRunId(clientRunId)
      currentRunIdRef.current = clientRunId;

      const conn = await ensureHubStarted();
      await conn.invoke("JoinGroup", clientRunId);

      const { RunId, ScanId } = await startScan(url, clientRunId);

      if (ScanId) 
      {
        setScanId(ScanId)
      }


      setStatus("running");

      if (ScanId) {
        fallbackTimerRef.current = setTimeout(async () => {
          try {
            const data = await getScan(ScanId);
            setScanResult(data);
            setStatus("completed");
            setLoading(false);
          } 
          catch 
          { 
            
           }
        }, 3000);
      }
    } 
    catch (err: any) {
      setError(err?.message || "Failed to start scan");
      setLoading(false);
    }
  };

  const safePrettyJson = (value: any) => {
    if (value == null) return "";
    const raw = value.scanresult ?? value.Scanresult ?? value.result ?? value;
    if (typeof raw === "string") {
      try { return JSON.stringify(JSON.parse(raw), null, 2); }
      catch { return String(raw); }
    }
    try { return JSON.stringify(raw, null, 2); }
    catch { return String(raw); }
  };

  return (
    <>
      <h1 className="text-xl font-semibold mb-4">Start Scan</h1>

      <form className="max-w-xl space-y-3" onSubmit={onSubmit}>
        <input
          type="url"
          placeholder="Enter target URL (e.g. https://github.com/juice-shop/juice-shop)"
          className="w-full border rounded p-2"
          value={targetUrl}
          onChange={(e) => setTargetUrl(e.target.value)}
          required
        />
        {error && <p className="text-red-600 text-sm whitespace-pre-wrap">{error}</p>}
        <button className="rounded px-4 py-2 border" disabled={loading || !targetUrl}>
          {loading ? "Downloading..." : "Start Scan"}
        </button>
      </form>

      {runId && (
        <div className="mt-6 p-3 border rounded w-full ">


          <ul className="mt-3 space-y-2">
            {stages.map((s, idx) => (
              <li key={idx} className="text-sm  p-2">
             
                <div>{s.message}</div>
                <div className="text-xs text-gray-500">
                  {new Date(s.at).toLocaleString()}
                </div>
                <br />
                <hr className="border-gray-500" />
              </li>
            ))}
            
            {stages.length === 0 && status === "running" && (
              <li className="text-sm text-gray-500">Waiting for progressâ€¦</li>
            )}
          </ul>

          {status === "completed" && scanResult && (
            <pre className="text-xs bg-black text-gray-100 rounded p-3 whitespace-pre-wrap break-words [overflow-wrap:anywhere] max-w-full max-h-96 overflow-auto mt-3">
{safePrettyJson(scanResult)}
            </pre>
          )}

          {status === "failed" && (
            <p className="text-sm text-red-600 mt-2">Scan failed.</p>
          )}
        </div>
      )}
    </>
  );
}
