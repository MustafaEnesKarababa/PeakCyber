"use client"

import { useEffect, useState } from "react"
import { getAllScans, getScan } from "@/api/scans"

export default function ScanHistoryPage() {
  const [scans, setScans] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const [selectedScanId, setSelectedScanId] = useState<number | null>(null)
  const [selectedScanResult, setSelectedScanResult] = useState<any>(null)
  const [loadingResult, setLoadingResult] = useState(false)

  useEffect(() => {
    (async () => {
      try {
        const list = await getAllScans(); 
        setScans(Array.isArray(list) ? list : []);
      } catch (e: any) {
        setError(e.message || "Failed to load scans");
      } finally {
        setLoading(false)
      }
    })();
  }, []);

  const onToggleResult = async (scan: any) => {
    const id = Number(scan.id);
    if (selectedScanId === id) {
      setSelectedScanId(null)
      setSelectedScanResult(null)
      return;
    }

    setSelectedScanId(id)
    setSelectedScanResult(null)
    setError(null)
 
    setLoadingResult(true);
    try {
      const full = await getScan(id)
      const raw = full?.scanresult 

      setSelectedScanResult(raw);
    } catch (e: any) {
      setError(e.message || "Failed to load scan result")
      setSelectedScanId(null)
      setSelectedScanResult(null)
    } finally {
      setLoadingResult(false)
    }
  };

  if (loading) {
    return (
      <main className="min-h-screen grid place-items-center p-6">
        <p>Loading...</p>
      </main>
    );
  }

  return (
    <main className="p-6 min-w-0">
      <h1 className="text-2xl font-semibold mb-4">Scan History</h1>

      {error && <p className="text-red-600 mb-3">{error}</p>}

      {scans.length === 0 ? (
        <p className="opacity-80">No scans found</p>
      ) : (
        <div className="space-y-3">
          {scans.map((scan) => {
            const id = Number(scan.id);
            const targetUrl = scan.targetUrl;
            const dateVal = scan.scanDate;
            const userName = scan.userName;
            const userRole = scan.role;

            const isOpen = selectedScanId === id;

            return (
              <div key={id} className="border rounded p-3 max-w-full">
                <div className="flex item-start justify-between gap-4">
                  <div className="text-sm min-w-0">
                    <div>
                      <span className="opacity-70">Scan ID :</span>{" "}
                      <span className="font-mono">{id}</span>
                    </div>
                    <div>
                      <span className="opacity-70">Target URL :</span>{" "}
                      <span className="break-all [overflow-wrap:anywhere]">
                        {targetUrl}
                      </span>
                    </div>
                    <div>
                      <span className="opacity-70">Scan Date :</span>{" "}
                      <span className="font-mono">
                        {dateVal ? new Date(dateVal).toLocaleString() : "-"}
                      </span>
                    </div>
                    <div>
                      <span className="opacity-70">User Name :</span>{" "}
                      <span className="font-mono">{userName}</span>
                    </div>
                    <div>
                      <span className="opacity-70">User Role :</span>{" "}
                      <span className="font-mono">{userRole}</span>
                    </div>
                  </div>

                  <button
                    className="border rounded px-3 py-1 text-sm shrink-0 h-14"
                    onClick={() => onToggleResult(scan)}
                    disabled={loadingResult && isOpen}
                  >
                    {loadingResult && isOpen
                      ? "Loading..."
                      : isOpen
                      ? "Hide Result"
                      : "Show Result"}
                  </button>
                </div>

                {isOpen && selectedScanResult && (
                  <div className="mt-3">
                    <div className="font-medium mb-1">Scan Result:</div>
                    <pre
                      className="
                        text-xs text-gray-100 rounded p-3
                        whitespace-pre-wrap break-words [overflow-wrap:anywhere]
                        max-w-full max-h-96 overflow-auto 
                      "
                    >
                      {JSON.stringify(JSON.parse(selectedScanResult ?? selectedScanResult), null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      )}
    </main>
  );
}
