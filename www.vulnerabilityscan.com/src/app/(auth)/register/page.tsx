"use client";
import { useState } from "react";
import { register } from "@/api/auth";
import { useRouter } from "next/navigation";

export default function RegisterPage() {
  const router = useRouter();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [username, setUsername] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);


  const passwordsMismatch =
    confirmPassword.length > 0 && password !== confirmPassword;

  const isFormValid =
    !!email &&
    !!username &&
    !!password &&
    !!confirmPassword &&
    password.length >= 4 &&
    !passwordsMismatch;

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);


    if (!email || !username || !password || !confirmPassword) {
      setError("Please fill in all fields");
      return;
    }
    if (password.length < 4) {
      setError("Password must be at least 4 characters long");
      return;
    }
    if (password !== confirmPassword) {
      setError("Passwords do not match");
      return;
    }

    setLoading(true);
    try {
      await register(email.trim(), password.trim(), username.trim());
      router.replace("/login");
    } catch (e: any) {
      setError(e.message || "Registration failed");
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="min-h-screen grid place-items-center p-6">
      <form onSubmit={onSubmit} className="w-full max-w-sm space-y-3">
        <h1 className="text-2xl font-semibold">Register</h1>

        <input
          className="w-full border rounded p-2"
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          autoComplete="email"
          required
        />

        <input
          className="w-full border rounded p-2"
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          autoComplete="username"
          required
        />

        <input
          className="w-full border rounded p-2"
          type="password"
          placeholder="Password (min 4 chars)"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          autoComplete="new-password"
          required
          minLength={4}
        />

        <input
          className="w-full border rounded p-2"
          type="password"
          placeholder="Confirm password"
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
          autoComplete="new-password"
          required
          aria-invalid={passwordsMismatch}
          aria-describedby={passwordsMismatch ? "pw-mismatch" : undefined}
        />

        {passwordsMismatch && (
          <p id="pw-mismatch" className="text-red-600 text-sm">
            Passwords do not match
          </p>
        )}

        {error && (
          <p className="text-red-600 text-sm whitespace-pre-wrap">{error}</p>
        )}

        <button className="w-full rounded p-2 border" disabled={loading || !isFormValid}>
          {loading ? "Registering..." : "Register"}
        </button>

        <p className="text-sm">
          Already have an account? <a className="underline" href="/login">Login</a>
        </p>
      </form>
    </main>
  );
}
