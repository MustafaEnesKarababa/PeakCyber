{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nskar/OneDrive/Masa%C3%BCst%C3%BC/PeakCyber/VulnerabilityTestWebSite/www.vulnerabilityscan.com/src/api/scans.ts"],"sourcesContent":["const API_BASE = process.env.NEXT_PUBLIC_API_BASE_URL || 'https://localhost:7095/api';\r\nimport {getToken} from './token'\r\n\r\ntype StartScanApiResponse = {\r\n  RunId?: string;\r\n  ScanId?: number;\r\n  runId?: string;\r\n  scanId?: number;\r\n};\r\n\r\nexport async function startScan(targetUrl: string) {\r\n  const token = getToken();\r\n  if (!token) throw new Error(\"Unauthorized\");\r\n\r\n  const res = await fetch(`${API_BASE}/Vulnerability/start-scan`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ TargetUrl: targetUrl }),\r\n  });\r\n\r\n  if (!res.ok) {\r\n    throw new Error((await res.text()) || \"Failed to start scan\");\r\n  }\r\n\r\n  const data: StartScanApiResponse = await res.json();\r\n  const RunId = data.RunId ?? data.runId;\r\n  const ScanId = data.ScanId ?? data.scanId;\r\n\r\n  if (!RunId) throw new Error(\"RunId not returned\");\r\n\r\n  return { RunId, ScanId: ScanId ?? null };\r\n}\r\n\r\n\r\n\r\nexport async function getScan (id : number){\r\n  const token = getToken();\r\n  if(!token){\r\n    throw new Error('Unauthorized');\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE}/Vulnerability/get-scan/${id}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(await response.text() || 'Failed to get scan');\r\n  }\r\n\r\n  return response.json();\r\n\r\n}\r\n\r\nexport async function getScans() {\r\n  const token = getToken();\r\n  if(!token){\r\n    throw new Error('Unauthorized');\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE}/Vulnerability/get-scans`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(await response.text() || 'Failed to get scans');\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\nexport async function getAllScans(){\r\n  const token = getToken();\r\n  if(!token){\r\n    throw new Error('Unauthorized');\r\n  }\r\n\r\n  const response = await fetch(`${API_BASE}/Admin/get-all-scans`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json',\r\n      \r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(await response.text() || 'Failed to get all scans');\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n\r\n  \r\n"],"names":[],"mappings":";;;;;;AAAiB;AACjB;AADA,MAAM,WAAW,kEAAwC;;AAUlD,eAAe,UAAU,SAAiB;IAC/C,MAAM,QAAQ,CAAA,GAAA,sHAAA,CAAA,WAAQ,AAAD;IACrB,IAAI,CAAC,OAAO,MAAM,IAAI,MAAM;IAE5B,MAAM,MAAM,MAAM,MAAM,AAAC,GAAW,OAAT,UAAS,8BAA4B;QAC9D,QAAQ;QACR,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;YACzB,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;YAAE,WAAW;QAAU;IAC9C;IAEA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM,AAAC,MAAM,IAAI,IAAI,MAAO;IACxC;IAEA,MAAM,OAA6B,MAAM,IAAI,IAAI;QACnC;IAAd,MAAM,QAAQ,CAAA,cAAA,KAAK,KAAK,cAAV,yBAAA,cAAc,KAAK,KAAK;QACvB;IAAf,MAAM,SAAS,CAAA,eAAA,KAAK,MAAM,cAAX,0BAAA,eAAe,KAAK,MAAM;IAEzC,IAAI,CAAC,OAAO,MAAM,IAAI,MAAM;IAE5B,OAAO;QAAE;QAAO,QAAQ,mBAAA,oBAAA,SAAU;IAAK;AACzC;AAIO,eAAe,QAAS,EAAW;IACxC,MAAM,QAAQ,CAAA,GAAA,sHAAA,CAAA,WAAQ,AAAD;IACrB,IAAG,CAAC,OAAM;QACR,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,WAAW,MAAM,MAAM,AAAC,GAAqC,OAAnC,UAAS,4BAA6B,OAAH,KAAM;QACvE,QAAQ;QACR,SAAS;YACP,iBAAiB,AAAC,UAAe,OAAN;YAC3B,gBAAgB;QAClB;IACF;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,MAAM,SAAS,IAAI,MAAM;IAC3C;IAEA,OAAO,SAAS,IAAI;AAEtB;AAEO,eAAe;IACpB,MAAM,QAAQ,CAAA,GAAA,sHAAA,CAAA,WAAQ,AAAD;IACrB,IAAG,CAAC,OAAM;QACR,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,WAAW,MAAM,MAAM,AAAC,GAAW,OAAT,UAAS,6BAA2B;QAClE,QAAQ;QACR,SAAS;YACP,iBAAiB,AAAC,UAAe,OAAN;YAC3B,gBAAgB;QAClB;IACF;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,MAAM,SAAS,IAAI,MAAM;IAC3C;IAEA,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe;IACpB,MAAM,QAAQ,CAAA,GAAA,sHAAA,CAAA,WAAQ,AAAD;IACrB,IAAG,CAAC,OAAM;QACR,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,WAAW,MAAM,MAAM,AAAC,GAAW,OAAT,UAAS,yBAAuB;QAC9D,QAAQ;QACR,SAAS;YACP,iBAAiB,AAAC,UAAe,OAAN;YAC3B,gBAAgB;QAElB;IACF;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,MAAM,SAAS,IAAI,MAAM;IAC3C;IAEA,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/nskar/OneDrive/Masa%C3%BCst%C3%BC/PeakCyber/VulnerabilityTestWebSite/www.vulnerabilityscan.com/src/app/dashboard/start-scan/page.tsx"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { startScan, getScan } from \"@/api/scans\";\r\nimport *as signalR from \"@microsoft/signalr\"\r\nimport { createScanHubConnection } from \"@/realtime/scanHub\";\r\n\r\nexport default function StartScanPage() {\r\n  const [targetUrl, setTargetUrl] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [scanId, setScanId] = useState<number | null>(null);\r\n  const [scanResult, setScanResult] = useState<any | null>(null);\r\n\r\n\r\n  \r\n\r\n  const onSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setScanResult(null);\r\n    setScanId(null);\r\n\r\n    if (!targetUrl.trim()) {\r\n      setError(\"Please enter a target URL\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const result = await startScan(targetUrl.trim());\r\n      const scanId = Number(result.scanId);\r\n\r\n      if (!scanId) {\r\n        throw new Error(\"Scan ID not returned\");\r\n      }\r\n      setScanId(scanId);\r\n\r\n      const data = await getScan(scanId);\r\n      setScanResult(data);\r\n    } catch (error: any) {\r\n      setError(error.message || \"Failed to start scan\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"text-xl font-semibold mb-4\">Start Scan</h1>\r\n\r\n      <form className=\"max-w-xl space-y-3\" onSubmit={onSubmit}>\r\n        <input\r\n          type=\"url\"\r\n          placeholder=\"Enter target URL\"\r\n          className=\"w-full border rounded p-2\"\r\n          value={targetUrl}\r\n          onChange={(e) => setTargetUrl(e.target.value)}\r\n          required\r\n        />\r\n        {error && (\r\n          <p className=\"text-red-600 text-sm whitespace-pre-wrap\">{error}</p>\r\n        )}\r\n\r\n        <button\r\n          className=\"rounded px-4 py-2 border\"\r\n          disabled={loading || !targetUrl}\r\n        >\r\n          {loading ? \"Dowloading...\" : \"Start Scan\"}\r\n        </button>\r\n      </form>\r\n\r\n      {(scanId !== null) && (\r\n        <div className=\"mt-6 p-3 border rounded w-full \">\r\n          <div className=\"font-medium\">\r\n            Scan ID: {scanId}\r\n          </div>\r\n          {scanResult ? (\r\n              <pre className=\"\r\n              text-xs text-gray-100 rounded p-3\r\n                        whitespace-pre-wrap break-words [overflow-wrap:anywhere]\r\n                        max-w-full max-h-96 overflow-auto\">\r\n               \r\n                Target URL : {scanResult.targetUrl} \r\n                <br />\r\n                Scan Date : {new Date(scanResult.scanDate).toLocaleString()}\r\n                <br />\r\n                <br />\r\n                <br />\r\n                Scan Result : {JSON.stringify(JSON.parse(scanResult.scanresult ?? scanResult.scanresult), null, 2)}\r\n\r\n              </pre>\r\n          ) : \r\n          (\r\n            <p className=\"text-sm opacity-80 mt-2\">\r\n              No scan results available.\r\n            </p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAMe,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IACpD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc;IAKzD,MAAM,WAAW,OAAO;QACtB,EAAE,cAAc;QAChB,SAAS;QACT,cAAc;QACd,UAAU;QAEV,IAAI,CAAC,UAAU,IAAI,IAAI;YACrB,SAAS;YACT;QACF;QAEA,WAAW;QACX,IAAI;YACF,MAAM,SAAS,MAAM,CAAA,GAAA,sHAAA,CAAA,YAAS,AAAD,EAAE,UAAU,IAAI;YAC7C,MAAM,SAAS,OAAO,OAAO,MAAM;YAEnC,IAAI,CAAC,QAAQ;gBACX,MAAM,IAAI,MAAM;YAClB;YACA,UAAU;YAEV,MAAM,OAAO,MAAM,CAAA,GAAA,sHAAA,CAAA,UAAO,AAAD,EAAE;YAC3B,cAAc;QAChB,EAAE,OAAO,OAAY;YACnB,SAAS,MAAM,OAAO,IAAI;QAC5B,SAAU;YACR,WAAW;QACb;IACF;QA4CuD;IA1CvD,qBACE;;0BACE,6LAAC;gBAAG,WAAU;0BAA6B;;;;;;0BAE3C,6LAAC;gBAAK,WAAU;gBAAqB,UAAU;;kCAC7C,6LAAC;wBACC,MAAK;wBACL,aAAY;wBACZ,WAAU;wBACV,OAAO;wBACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;wBAC5C,QAAQ;;;;;;oBAET,uBACC,6LAAC;wBAAE,WAAU;kCAA4C;;;;;;kCAG3D,6LAAC;wBACC,WAAU;wBACV,UAAU,WAAW,CAAC;kCAErB,UAAU,kBAAkB;;;;;;;;;;;;YAI/B,WAAW,sBACX,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;4BAAc;4BACjB;;;;;;;oBAEX,2BACG,6LAAC;wBAAI,WAAU;;4BAG8B;4BAE7B,WAAW,SAAS;0CAClC,6LAAC;;;;;4BAAK;4BACO,IAAI,KAAK,WAAW,QAAQ,EAAE,cAAc;0CACzD,6LAAC;;;;;0CACD,6LAAC;;;;;0CACD,6LAAC;;;;;4BAAK;4BACS,KAAK,SAAS,CAAC,KAAK,KAAK,CAAC,CAAA,yBAAA,WAAW,UAAU,cAArB,oCAAA,yBAAyB,WAAW,UAAU,GAAG,MAAM;;;;;;6CAKpG,6LAAC;wBAAE,WAAU;kCAA0B;;;;;;;;;;;;;;AAQnD;GA/FwB;KAAA","debugId":null}}]
}